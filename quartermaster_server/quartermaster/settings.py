"""
Django settings for quartermaster project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import os
from configparser import RawConfigParser
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from datetime import timedelta
from pathlib import Path
from urllib.parse import urlparse

import ldap
import paramiko
from django_auth_ldap.config import LDAPSearch

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Are we in a docker environment or not?
IN_DOCKER = Path('/.dockerenv').exists()

if IN_DOCKER:
    CONFIG_FILE_PATH = Path('/config.ini')
else:
    CONFIG_FILE_PATH = Path(BASE_DIR) / '../config.ini'

config_string = "[all]\n" + CONFIG_FILE_PATH.read_text()
raw_config = RawConfigParser()
raw_config.read_string(config_string)
config_file = raw_config['all']


def find_setting(name: str, default=str) -> str:
    # Check environment
    if name in os.environ:
        return os.environ.get(name)
    # Config file
    if name in config_file:
        return config_file[name]
    if default:
        return default
    raise ValueError(f"Could not find value for {name}")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = find_setting('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

SERVER_BASE_URL = find_setting('SERVER_BASE_URL')
parsed_server_base_url = urlparse(SERVER_BASE_URL)

ALLOWED_HOSTS = ['backend', 'localhost', parsed_server_base_url.netloc]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'huey.contrib.djhuey',  # Provides Task scheduling
    'rest_framework',  # Makes nice API
    'rest_framework.authtoken',  # Only needed if using clients that self authenticate such as in CI
    'bootstrap4',  # Styling for user GUI
    'data',  # This is the core datastore that everything else hangs off of
    'gui',  # UI for user interactive interface
    'api',  # API, used to support client
    'client',  # Download link for client software
]

ci_to_add = find_setting('ENABLED_CI').split(',')
if ci_to_add != ['']:
    INSTALLED_APPS.extend([f"ci_{driver}" for driver in ci_to_add])

drivers_to_add = find_setting('ENABLED_USB_DRIVERS').split(',')
if drivers_to_add != ['']:
    INSTALLED_APPS.extend([f"driver_{driver}" for driver in drivers_to_add])
else:
    print("*****Warning, no drivers are enabled. Quartermaster can do much without them. "
          "Configure some by setting `ENABLED_USB_DRIVERS`")

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'quartermaster.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['quartermaster/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'quartermaster.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

if IN_DOCKER:
    DB_FILE = Path('/data') / 'db.sqlite3'  # assume we are in Docker container
else:
    DB_FILE = Path(BASE_DIR) / '../db.sqlite3'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'quartermaster',
        'USER': 'quartermaster',
        'PASSWORD': 'password',
        'HOST': 'localhost',
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Canada/Eastern'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

if IN_DOCKER:
    REDIS_HOST = "redis"
else:
    REDIS_HOST = "localhost"
HUEY = {
    'huey_class': 'huey.PriorityRedisHuey',  # Huey implementation to use.
    'connection': {
        'host': REDIS_HOST,
        'immediate': False
    },
    'consumer': {
        'workers': 2,
        'worker_type': 'thread',
    },
}

LOGIN_REDIRECT_URL = 'gui:list_resources'
LOGOUT_REDIRECT_URL = 'login'

RESERVATION_MAX_MINUTES = timedelta(minutes=int(find_setting('RESERVATION_MAX_MINUTES')))
RESERVATION_CHECKIN_TIMEOUT_MINUTES = timedelta(minutes=int(find_setting('RESERVATION_CHECKIN_TIMEOUT_MINUTES')))
SSH_USERNAME = find_setting('SSH_USERNAME')
SSH_PRIVATE_KEY_FILE = find_setting('SSH_PRIVATE_KEY_FILE')
SSH_PRIVATE_KEY = paramiko.Ed25519Key(filename=SSH_PRIVATE_KEY_FILE)

########### LDAP CONFIGURATION ###########
AUTHENTICATION_BACKENDS = (
    "django_auth_ldap.backend.LDAPBackend",
    "django.contrib.auth.backends.ModelBackend"
)
# Baseline configuration.
AUTH_LDAP_SERVER_URI = find_setting('LDAP_SERVER_URI')
AUTH_LDAP_START_TLS = True
AUTH_LDAP_BIND_DN = find_setting('LDAP_BIND_USER')
AUTH_LDAP_BIND_PASSWORD = find_setting('LDAP_BIND_PASSWORD')
AUTH_LDAP_USER_SEARCH = LDAPSearch(
    find_setting('LDAP_SUBTREE'), ldap.SCOPE_SUBTREE, "sAMAccountName=%(user)s"
)
AUTH_LDAP_USER_ATTR_MAP = {
    "username": "sAMAccountName",
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}
# If you are having LDAP issues this may help debug them
# ldap.set_option(ldap.OPT_DEBUG_LEVEL, 4095)

# TODO: Set this up
# AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#     "is_active": "cn=active,ou=django,ou=groups,dc=example,dc=com",
#     "is_staff": "cn=staff,ou=django,ou=groups,dc=example,dc=com",
#     "is_superuser": "cn=superusers,ou=django,ou=groups,dc=example,dc=com",
# }

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication'

    ]
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {"console": {"class": "logging.StreamHandler"}},
    "loggers": {"django_auth_ldap": {"level": "DEBUG", "handlers": ["console"]}},
}

STATIC_ROOT = Path(BASE_DIR) / '../deploy/static'

STATIC_URL = '/static/'

SUPPORTED_PLATFORMS = ('Linux', 'Windows', 'Mac')
